lotsa.means <- numeric(nsim)
#runs nsim times creating a vector of numbers in the expoential disto
#calculating the distro's mean and stores it in the vector above
for (i in 1:nsim) {
x <- rexp(n)
lotsa.means[i] <- mean(x)
}
#creates a histogram of the distro of the means stored in the vector above
hist (lotsa.means)
###########################################################################################
#Scott Gozdzialski  1/27/2017
#Modified lotsa.medians from SMU data science course to calculate
#a random sample of exponential distributions of different size 1000 times
#n is the number of samples in the in the exponental distro
#nsim controls the vector size and the number of means in this code
###########################################################################################
#n and nsim are control variables
n <- 10
nsim <- 1000
#creates a empty vector (size of nsim) of numbers all values are 0 until filled
lotsa.means <- numeric(nsim)
#runs nsim times creating a vector of numbers in the expoential disto
#calculating the distro's mean and stores it in the vector above
for (i in 1:nsim) {
x <- rexp(n)
lotsa.means[i] <- mean(x)
}
#creates a histogram of the distro of the means stored in the vector above
hist (lotsa.means)
###########################################################################################
#Scott Gozdzialski  1/27/2017
#Modified lotsa.medians from SMU data science course to calculate
#a random sample of exponential distributions of different size 1000 times
#n is the number of samples in the in the exponental distro
#nsim controls the vector size and the number of means in this code
###########################################################################################
#n and nsim are control variables
n <- 10
nsim <- 1000
#creates a empty vector (size of nsim) of numbers all values are 0 until filled
lotsa.means <- numeric(nsim)
#runs nsim times creating a vector of numbers in the expoential disto
#calculating the distro's mean and stores it in the vector above
for (i in 1:nsim) {
x <- rexp(n)
lotsa.means[i] <- mean(x)
}
#creates a histogram of the distro of the means stored in the vector above
hist (lotsa.means)
n <- 50
nsim <- 1000
#creates a empty vector (size of nsim) of numbers all values are 0 until filled
lotsa.means <- numeric(nsim)
#runs nsim times creating a vector of numbers in the expoential disto
#calculating the distro's mean and stores it in the vector above
for (i in 1:nsim) {
x <- rexp(n)
lotsa.means[i] <- mean(x)
}
#creates a histogram of the distro of the means stored in the vector above
hist (lotsa.means)
n <- 50
nsim <- 1000
#creates a empty vector (size of nsim) of numbers all values are 0 until filled
lotsa.means <- numeric(nsim)
#runs nsim times creating a vector of numbers in the expoential disto
#calculating the distro's mean and stores it in the vector above
for (i in 1:nsim) {
x <- rexp(n)
lotsa.means[i] <- mean(x)
}
#creates a histogram of the distro of the means stored in the vector above
hist (lotsa.means)
n <- 50
nsim <- 1000
#creates a empty vector (size of nsim) of numbers all values are 0 until filled
lotsa.means <- numeric(nsim)
#runs nsim times creating a vector of numbers in the expoential disto
#calculating the distro's mean and stores it in the vector above
for (i in 1:nsim) {
x <- rexp(n)
lotsa.means[i] <- mean(x)
}
#creates a histogram of the distro of the means stored in the vector above
hist (lotsa.means)
n <- 50
nsim <- 1000
#creates a empty vector (size of nsim) of numbers all values are 0 until filled
lotsa.means <- numeric(nsim)
#runs nsim times creating a vector of numbers in the expoential disto
#calculating the distro's mean and stores it in the vector above
for (i in 1:nsim) {
x <- rexp(n)
lotsa.means[i] <- mean(x)
}
#creates a histogram of the distro of the means stored in the vector above
hist (lotsa.means)
#n and nsim are control variables
n <- 500
nsim <- 1000
#creates a empty vector (size of nsim) of numbers all values are 0 until filled
lotsa.means <- numeric(nsim)
#runs nsim times creating a vector of numbers in the expoential disto
#calculating the distro's mean and stores it in the vector above
for (i in 1:nsim) {
x <- rexp(n)
lotsa.means[i] <- mean(x)
}
#creates a histogram of the distro of the means stored in the vector above
hist (lotsa.means)
#n and nsim are control variables
n <- 500
nsim <- 1000
#creates a empty vector (size of nsim) of numbers all values are 0 until filled
lotsa.means <- numeric(nsim)
#runs nsim times creating a vector of numbers in the expoential disto
#calculating the distro's mean and stores it in the vector above
for (i in 1:nsim) {
x <- rexp(n)
lotsa.means[i] <- mean(x)
}
#creates a histogram of the distro of the means stored in the vector above
hist (lotsa.means)
#n and nsim are control variables
n <- 500
nsim <- 1000
#creates a empty vector (size of nsim) of numbers all values are 0 until filled
lotsa.means <- numeric(nsim)
#runs nsim times creating a vector of numbers in the expoential disto
#calculating the distro's mean and stores it in the vector above
for (i in 1:nsim) {
x <- rexp(n)
lotsa.means[i] <- mean(x)
}
#creates a histogram of the distro of the means stored in the vector above
hist (lotsa.means)
#n and nsim are control variables
n <- 3
nsim <- 1000
#creates a empty vector (size of nsim) of numbers all values are 0 until filled
lotsa.means <- numeric(nsim)
#runs nsim times creating a vector of numbers in the expoential disto
#calculating the distro's mean and stores it in the vector above
for (i in 1:nsim) {
x <- rexp(n)
lotsa.means[i] <- mean(x)
}
#creates a histogram of the distro of the means stored in the vector above
hist (lotsa.means)
#n and nsim are control variables
n <- 3
nsim <- 1000
#creates a empty vector (size of nsim) of numbers all values are 0 until filled
lotsa.means <- numeric(nsim)
#runs nsim times creating a vector of numbers in the expoential disto
#calculating the distro's mean and stores it in the vector above
for (i in 1:nsim) {
x <- rexp(n)
lotsa.means[i] <- mean(x)
}
#creates a histogram of the distro of the means stored in the vector above
hist (lotsa.means)
#n and nsim are control variables
n <- 3
nsim <- 1000
#creates a empty vector (size of nsim) of numbers all values are 0 until filled
lotsa.means <- numeric(nsim)
#runs nsim times creating a vector of numbers in the expoential disto
#calculating the distro's mean and stores it in the vector above
for (i in 1:nsim) {
x <- rexp(n)
lotsa.means[i] <- mean(x)
}
#creates a histogram of the distro of the means stored in the vector above
hist (lotsa.means)
summary(stack.loss)
str(stack.loss)
?str
str(stack.loss)
summary(stack.loss)
stack.loss
Ait.Flow
Air.Flow
stackloss
summary(stackloss)
str(stackloss)
scatterplot(stackloss$Air.Flow,stackloss$satck.loss)
plot(stackloss$Air.Flow, stackloss$stack.loss, main="Scatterplot Air.Flow vs stack.loss",
xlab="Air Flow", ylab="Stack Loss ")
swirl
library(swirl)
swirl()
TRUE==TRUE
(FALSE==TRUE)==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
5!=7
5==7
!5==7
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5>8||6!=8&&4>3.9
isTRUE(6>4)
identical ('twins', 'twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any (ints>0)
any (ints<0)
all(ints>0)
Sys.Data()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
submit()
submit()
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
remaindder(11, 5)
remainder(11, 5)
remainder(divisor=11, num =5)
remainder(4, div = 2)
args(remainder)
usbmit()
submit()
submit()
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evakuate(function(x){x+1},6)
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[lenght(x)]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
telegram(Great)
telegram("Great")
submit()
mad_libs(place="home".adjective="hard",noun="moose")
mad_libs(place="home",adjective="hard",noun="moose")
submit()
submit()
submit()
submit()
submit()
"I" %p% "love" %p% "R!"
library(swirl)
swirl()()
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls.list)
as.character(cls_list)
?sapply
sapply(class(flags))
sapply(class(flags),FUN)
sapply(flags,class())
sapply(flags,class)
cls_vect <-sapply(flags,class)
class (cls_vect)
sum(flags%Orange)
sum(flags$Orange)
sum(flags$orange)
flag_colors <- fags[,11:17]
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lappy(flag_shape,range)
lapply(flag_shape,range)
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
lapply(flags,unique)
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals, length)
sapply(flags,unique)
lapply(unique_vals, function(elem elem[2]))
lapply(unique_vals, function(elem) elem[2]))
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric[1])
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flag$animate, flags$landmass, mean)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red,summary)
tapply(flags$population, flags$landmass, summary)
plot()
emperature <- airquality$Temp
hist(Temperature)
# histogram with added parameters
hist(Temperature,
main="Maximum daily temperature at La Guardia Airport",
xlab="Temperature in degrees Fahrenheit",
xlim=c(50,100),
col="darkmagenta",
freq=FALSE
q
# Take only Temp columns
Temperature <- airquality$Temp
hist(Temperature)
# histogram with added parameters
hist(Temperature,
main="Maximum daily temperature at La Guardia Airport",
xlab="Temperature in degrees Fahrenheit",
xlim=c(50,100),
col="darkmagenta",
freq=FALSE
)
plot(x=airquality$Month, y=airquality$Temp, xlab="Month", ylab ="Tempurature")
plot(x=airquality$Month, y=airquality$Temp, main = "Temperature in Month", xlab="Month", ylab ="Tempurature")
plot(x=airquality$Month,
y=airquality$Temp,
main = "Temperature in Month",
xlab="Month",
ylab ="Tempurature")
source('C:/Users/Scott\'s/Downloads/air_hist.R')
plot(x = airquality$Temp,
y = airquality$ozone,
main = "Temperature vs Ozone",
xlab ="Temperature",
ylab ="Ozone")
plot(x = airquality$Temp,
y = airquality$ozone,
main = "Temperature vs Ozone",
xlab ="Temperature",
ylab ="Ozone")
plot(x = airquality$Temp,
y = airquality$ozone,
main = "Temperature vs Ozone",
xlab ="Temperature",
ylab ="Ozone")
source('C:/Users/Scott\'s/Downloads/air_hist.R', echo=TRUE)
plot(x = airquality$Temp,
y = airquality$ozone,
main = "Temperature vs Ozone",
xlab ="Temperature",
ylab ="Ozone")
plot(x = airquality$Temp,
y = airquality$ozone,
main = "Temperature vs Ozone",
xlab ="Temperature",
ylab ="Ozone")
plot(x=airquality$Month,
y=airquality$Temp,
main = "Temperature in Month",
xlab="Month",
ylab ="Tempurature")
cars
summary(pressure)
pressure
plot(x= pressure$temperature,
y = pressure$pressure,
main="Temperature vs Pressure",
xlab = "Temperature",
ylab = "Pressure")
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,rows=10)
head(plants,10)
tail(plants)
tail(plants,15)
summary(plants)
table(plans$Active_Growth_Period)
table(plants$Active_Growth_Period)
str(plant)
str()
str(plants)
sample()
?sample
sample(1:6, 4, replace =TRUE)
sample(1:6, 4, replace =TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
prob - c(0.3, 0.7)
prob = c(0.3, 0.7)
flips <- sample(c(0,1),100, replace = TRUE, prob = c (0.3, 0.7))
flips
sum(flips)
?rbinom()
?rbinom
rbinom(1, size =100, prob =0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum (flips2)
rnorm()
?rnorm
rnorm(10)
rnorm(10, mean=100, sd=25)
rpois(10,5, mean =10)
rpois(10,5)
rpois(5, 10)
my_pois <- replicate(100, repois(5,10))
my_pois <- replicate(100, rpois(5,10))
my_pois
colmeans(my_rpois)
colMeans(my_rpois)
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
getwd()
ls()
list.files(0)
list.files()
getwd()
setwd("C:/Users/Scott's/Documents/DoingDataScience")
setwd("C:\\Users\\Scott's\\Documents\\DoingDataSciene")
getwd()
list.files()
fruit.data <- read.csv("fruitData.csv",header=TRUE, sep=",")
View(fruit.data)
head(fruit.data)
summary(fruit.data)
str(fruit.data)
list.files()
fruit.nutrition <- read.csv("fruitNutrition.csv", header=TRUE, sep",")
fruit.nutrition <- read.csv("fruitNutrition.csv", header=TRUE, sep",")
fruit.nutrition <- read.csv("fruitNutrition.csv", header=TRUE, sep=",")
head(fruit.nutrition)
summary(fruit.nutrition)
str(fruit.nutrition)
library(swirl)
swirl()
d1
d1 <- Sys.Data()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Data("1969-01-01")
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <-Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXct(Sys.time())
t2 <- as.POSIXlt(Sys.time())
t2
class(t2\)
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
d1 <- weekdays()
weekdays(d1)
months(t1)
quarters(t2)
t3 <- c("October 17, 1986 08:24")
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.Time() >t1
Sys.time() >t1
Sys.time() - t1
difftime(Sys.time(),t1, units ="days")
library(plyr)
library(gdata)
install.packages("gdata")
install.packages("cpca")
library(gdata)
getwd()
bk <- read.csv("rollingsales_brooklyn.csv",skip=4,header=TRUE)
bk <- read.csv("rollingsales_brooklyn.csv",skip=4,header=TRUE)
head(bk)
summary(bk)
str(bk)
bk$SALE.PRICE.N <- as.numeric(gsub("[^[:digit:]]","", bk$SALE.PRICE))
count(is.na(bk$SALE.PRICE.N))
